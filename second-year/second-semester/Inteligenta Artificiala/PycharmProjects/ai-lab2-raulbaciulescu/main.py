


import os
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter('ignore')




def read_from_gml(file_name):
    '''
    read a graph from gml file
    :param file_name:
    :return: network = {'mat': ..., 'noNodes': ..., 'noEdges': ..., 'degrees': ...}
    '''
    if 'karate' in file_name:
        graph = nx.read_gml(file_name, label='id')
    else:
        graph = nx.read_gml(file_name)
    network = {"noNodes": graph.number_of_nodes(), "noEdges": graph.number_of_edges()}
    matrix = nx.to_numpy_matrix(graph)
    network["mat"] = matrix
    degrees = []
    noEdges = 0

    for i in range(network['noNodes']):
        d = 0
        for j in range(network['noNodes']):
            if matrix.item(i, j) == 1:
                d += 1
            if j > i:
                noEdges += matrix.item(i, j)
        degrees.append(d)

    network["degrees"] = degrees
    return network





def edge_to_remove(g):
    '''
    find the most betweenness edge
    :param g:
    :return:
    '''
    d1 = nx.edge_betweenness_centrality(g)
    list_of_tuples = list(d1.items())
    list_of_tuples = sorted(list_of_tuples, key=lambda x: x[1], reverse=True)
    return list_of_tuples[0][0]



def plotNetwork(network, communities=None):
    '''
    plot a network
    :param network:
    :param communities:
    :return:
    '''
    if communities is None:
        communities = [1] * network['noNodes']
    np.random.seed(123)
    A = np.matrix(network["mat"])
    G = nx.from_numpy_matrix(A)
    np.random.seed(123)
    pos = nx.spring_layout(G)
    plt.figure(figsize=(10, 10))
    nx.draw_networkx_nodes(G, pos, node_size=80, cmap=plt.cm.RdYlBu, node_color=communities)
    nx.draw_networkx_edges(G, pos, alpha=0.3)
    plt.show()


def girvan(network, nr_of_comunities):
    '''
    divide nodes of the graph in nr_of_comunities comunities using girvan algorithm
    :param network:
    :param nr_of_comunities:
    :return:
    '''
    matrix = np.matrix(network["mat"])
    g = nx.from_numpy_matrix(matrix)

    lena = nx.number_connected_components(g)
    while (lena < nr_of_comunities):
        xy = edge_to_remove(g)
        g.remove_edge(xy[0], xy[1])

        lena = nx.number_connected_components(g)

    components = tuple(nx.connected_components(g))
    communities = [0] * network['noNodes']
    color = 1
    for community in components:
        for node in community:
            communities[node] = color
        color += 1
    return communities



def test(file_name):
    '''
    compare length of cumunities generated by girvan algorithm with length of communities from real.dat
    :param file_name:
    :return:
    '''
    crt_dir = os.getcwd()
    f = open(file_name, "r")
    lines = f.readlines()

    communities = []
    length2 = []
    if 'karate' in file_name:
        communities = girvan(read_from_gml(os.path.join(crt_dir, 'real/karate/', 'karate.gml')), len(lines))
    if 'dolphins' in file_name:
        communities = girvan(read_from_gml(os.path.join(crt_dir, 'real/dolphins/', 'dolphins.gml')), len(lines))
    if 'krebs' in file_name:
        communities = girvan(read_from_gml(os.path.join(crt_dir, 'real/krebs/', 'krebs.gml')), len(lines))
    if 'football' in file_name:
        communities = girvan(read_from_gml(os.path.join(crt_dir, 'real/football/', 'football.gml')), len(lines))

    #
    for i in range(1,len(lines)+1):
        nr = 0
        for j in communities:
            if i == j:
                nr += 1
        length2.append(nr)

    #
    length = []
    for line in lines:
        elems = line.split()
        length.append(len(elems))


    length2.sort()
    length.sort()
    for len1, len2 in zip(length, length2):
        assert abs(len1 - len2) <= 10



def main():
    test('real/karate/real.dat')
    test('real/dolphins/real.dat')
    test('real/football/real.dat')
    test('real/krebs/real.dat')
    crt_dir = os.getcwd()
    network_football = read_from_gml(os.path.join(crt_dir, 'real/football/', 'football.gml'))
    network_dolphins = read_from_gml(os.path.join(crt_dir, 'real/dolphins/', 'dolphins.gml'))
    network_karate = read_from_gml(os.path.join(crt_dir, 'real/karate/', 'karate.gml'))
    network_krebs = read_from_gml(os.path.join(crt_dir, 'real/krebs/', 'krebs.gml'))

    plotNetwork(network_karate, girvan(network_karate, 20))

if __name__ == '__main__':
    main()